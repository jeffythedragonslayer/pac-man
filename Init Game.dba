Rem *** Include File: Init Game.dba ***
Rem Created: [date] [time]

Rem Included in Project: Pac-Man.dbpro

`load the game
function init_game()

  set dir "Media"

    load_media()
    get_maze_data()
    position_maze()

  set dir ".."

  game_inited = 1

endfunction

`load the game images and make sprites
function load_media()
  
  load_maze()
  load_misc()
  load_pac()
  load_fruits()
  load_sounds()
  load_ghosts()
  
endfunction

function load_sounds()

  snd_ready = load_sound("Ready.wav")
  snd_eat_fruit = load_sound("Eat Fruit.wav")
  snd_eat_dot = load_sound("Eat Dot.wav")
  snd_eat_ghost = load_sound("Eat Ghost.wav")
  snd_bonus = load_sound("Bonus.wav")
  snd_die = load_sound("Die.wav")
  
endfunction

function load_pac()

  `load Pac-Man
  img_pac = free_img()
  spr_pac = free_spr()
  create animated sprite spr_pac, "Pac-Man.png", 2, 4, img_pac
  set sprite priority spr_pac, 2
  set sprite spr_pac, 0, 1
  
  `load Pac-Man die animation
  img_pac_die = free_img()
  spr_pac_die = free_spr()
  create animated sprite spr_pac_die, "Pac-Man die.png", 5, 2, img_pac_die
  set sprite priority spr_pac_die, 2
  set sprite spr_pac_die, 0, 1
  
endfunction

function load_ghosts()

  local img_ptr as dword
  dim imgs_ghosts(5) as dword
  dim sprs_ghosts(4) as ghost

  `load blue ghost image
  imgs_ghosts(0) = load_img("Blue Ghost.png", 1)
  
  for img_ptr = 0 to 4
    
    `load ghost image and sprite
    imgs_ghosts(img_ptr+1) = free_img()
    sprs_ghosts(img_ptr).id = free_spr()
    create animated sprite sprs_ghosts(img_ptr).id, "Ghost " + str$(img_ptr+1) + ".png", 2, 4, imgs_ghosts(img_ptr+1)
    set sprite priority sprs_ghosts(img_ptr).id, 2
    set sprite sprs_ghosts(img_ptr).id, 0, 1
    
    `paste another blue ghost image
    if img_ptr < 4 then paste image imgs_ghosts(0), 0, img_ptr*32
    
  next img_ptr
  
  `get blue ghost image at full size
  imgs_ghosts(0) = get_img(0, 0, 64, 128, 1)

endfunction

function load_fruits()

  local img_fruit as dword
  local img_ptr as dword
  dim imgs_fruits(11) as fruit

  `load the fruits
  img_fruit = load_img("Fruits.png", 1)
  paste image img_fruit, 0, 0
  
  `get the fruit images from the pasted image
  for ypix = 0 to 95 step 32
    for xpix = 0 to 127 step 32
    
      `capture the 32*32 image at these coordinates
      imgs_fruits(img_ptr).id = get_img(xpix, ypix, xpix+32, ypix+32, 1)
      
      `move the fruit image poiunter
      inc img_ptr
      
    next xpix
  next ypix
  
  `we're done with Fruits.png
  delete image img_fruit
  
endfunction

function load_maze()

  local xpix as dword
  local ypix as dword
  local img_maze as dword
  local img_ptr as dword
  dim imgs_maze(28) as dword

  img_maze = load_img("Maze.png", 1)
  paste image img_maze, 0, 0

  `get the maze images from the pasted image
  for ypix = 0 to 159 step 32
    for xpix = 0 to 191 step 32

      `skip the blank
      if img_ptr < 29

        `capture the 32*32 image at these coordinates
        imgs_maze(img_ptr) = get_img(xpix, ypix, xpix+32, ypix+32, 1)

        `move the current wall image pointer
        inc img_ptr

      endif

    next xpix
  next ypix

  `we're done with Maze.png
  delete image img_maze

endfunction

function load_misc()

  dim sprs_dots() as yum

  `load dot images
  img_bdot = load_img("Bdot.png", 1)
  img_sdot = load_img("Sdot.png", 1)
  
  `load "Ready!" image
  img_ready = load_img("Ready.png", 1)
  
  `load "Game Over" image
  img_game_over = load_img("Game Over.png", 1)
  
  `load the bitmap font
  loadBMfont("PacMania.png")
  TrimBMfont()
  
endfunction

`get the maze data from a file
function get_maze_data()

  local file_maze as dword
  local str as string
  local row as dword
  local column as dword

  `open maze file
  file_maze = open_to_read("Maze.map")

  `get maze dimensions
  read string file_maze, str
  csv$(str)
  maze_columns = val(csv$(""))
  maze_rows = val(csv$(""))

  `create maze array
  dim sprs_maze(maze_columns + 1, maze_rows + 1) as wall

  `load maze array data
  for row = 1 to maze_rows

    `read entire row
    read string file_maze, str

    for column = 1 to maze_columns
  
      `select type of tile
      select mid$(str, column)
        case "#"
          `wall
          sprs_maze(column, row).solid = 1
        endcase
        case "."
          `small dot
          sprs_maze(column, row).food = 1
        endcase
        case "*"
          `big dot
          sprs_maze(column, row).food = 2
        endcase
        case "G"
          `ghost gate
          sprs_maze(column, row).solid = 2
        endcase
        case "P"
          `ghost pen area
          pos_ghost_pen.x = column
          pos_ghost_pen.y = row
        endcase
        case "S"
          `Pac-Man spawn point
          pos_pac_spawn.x = column
          pos_pac_spawn.y = row                         
        endcase
        case "W"

          `wrap point
          sprs_maze(column, row).solid = 1

          `change the maze tile adjacent to this tile's solid state to 1
          if row = 1
            `upper tile needs to be set
            sprs_maze(column, 0).solid = 1
          else
            if row = maze_rows
              `lower tile needs to be set
              sprs_maze(column, maze_rows + 1).solid = 1
            else
              if column = 1
                `left tile needs to be set
                sprs_maze(0, row).solid = 1
              else
                if column = maze_columns
                  `right tile needs to be set
                  sprs_maze(maze_columns + 1, row).solid = 1
                endif
              endif
            endif
          endif

        endcase
        case "R"
          `message point
          pos_message.x = column
          pos_message.y = row
        
          `make message sprite
          spr_message = make_spr(0, 0, img_ready)
          set sprite spr_message, 0, 0
          set sprite priority spr_message, 2
          
          `make fruits sprite
          spr_fruit = make_spr(column*32, row*32, imgs_fruits(0).id)
          hide sprite spr_fruit
          set sprite priority spr_fruit, 1
          set sprite spr_fruit, 0, 0
          
        endcase
      endselect
  
    next column

  next row

  `close the map file
  close file file_maze

endfunction

`make and position the maze sprites using the data collected from get_maze_data()
function position_maze()

  local column as dword
  local row as dword
  local img_ptr as dword

  for row = 1 to maze_rows
    for column = 1 to maze_columns

      `select image
      select sprs_maze(column, row).solid
        case 0
          img_ptr = 11
        endcase
        case 1
          img_ptr = pick_img(column, row)
        endcase
        case 2
          img_ptr = 27
        endcase
      endselect

      `make sprite for this tile
      sprs_maze(column, row).id = make_spr(column * 32, row * 32, imgs_maze(img_ptr))

      `turn off backsave and transparency
      set sprite sprs_maze(column, row).id, 0, 0

    next column
  next row
  
endfunction

`decide which wall piece goes in the location given by the parameters
function pick_img(column as dword, row as dword)

  local img as dword
  local x as dword
  local y as dword
  local try as dword
  local cell as dword
  local pass as boolean
  
  `copy the maze solid data into a chunk of memory for easier access
  for x = 0 to 2
    for y = 0 to 2
      chunk(x, y) = sprs_maze(column + x - 1, row + y - 1).solid
    next y
  next x  
  
  `go back to the beginning of the data
  restore pick_imgs
  
  `try each map
  for try = 1 to tries
  
    `map matches by default
    pass = 1
    
    `copy the map solid data into the map chunk
    for cell = 0 to 8
    
      `read cell data
      read map(cell)
      
      `compare it with the maze data if it isn't the middle square
      `if map doesn't match set passing variable to 
      if cell <> 4 and map(cell) <> 3 and map(cell) <> chunk(cell) then pass = 0
      
    next cell
    
    if pass
      `map matches
      img = map(4)
      exitfunction img
    endif
    
  next try
  
  `no matching piece found
  img = 4
  
endfunction img

pick_imgs:
#constant tries = 27

data 3, 1, 1
data 0, 0, 1
data 3, 1, 1

data 0, 0, 3
data 1, 1, 0
data 1, 1, 0

data 3, 0, 3
data 0, 2, 1
data 3, 0, 3

data 3, 0, 3
data 1, 3, 1
data 0, 1, 0

data 1, 1, 1
data 1, 4, 1
data 1, 1, 1

data 3, 0, 3
data 1, 5, 0
data 0, 1, 3

data 3, 0, 3
data 1, 6, 1
data 1, 1, 1

data 1, 1, 0
data 1, 7, 0
data 0, 0, 3

data 3, 0, 3
data 0, 8, 0
data 3, 1, 3

data 3, 1, 3
data 0, 9, 0
data 3, 1, 3

data 3, 0, 3
data 0, 10, 0
data 3, 0, 3

data 1, 1, 3
data 1, 12, 0
data 1, 1, 3

data 0, 1, 1
data 0, 13, 1
data 3, 0, 0

data 3, 1, 0
data 0, 14, 1
data 3, 1, 0

data 0, 1, 0
data 1, 15, 1
data 0, 1, 0

data 3, 0, 3
data 1, 16, 1
data 3, 0, 3

data 0, 1, 3
data 1, 17, 0
data 0, 1, 3

data 1, 1, 1
data 1, 18, 1
data 3, 0, 3

data 3, 0, 0
data 0, 19, 1
data 0, 1, 1

data 3, 1, 0
data 0, 20, 1
data 3, 0, 3

data 0, 1, 0
data 1, 21, 1
data 3, 0, 3

data 3, 0, 3
data 1, 22, 0
data 3, 0, 3

data 3, 1, 3
data 0, 23, 0
data 3, 0, 3

data 0, 1, 3
data 1, 24, 0
data 3, 0, 3

data 3, 0, 3
data 0, 25, 1
data 3, 1, 0

data 3, 0, 3
data 1, 26, 2
data 3, 0, 3

data 3, 0, 3
data 2, 28, 1
data 3, 0, 3